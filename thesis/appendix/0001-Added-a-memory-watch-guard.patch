From 123fb80eea9fa7b3e6503c2d70a2eb9a32c33aca Mon Sep 17 00:00:00 2001
From: Peter Schuster <schuster.pe@gmail.com>
Date: Tue, 25 Dec 2012 23:25:41 +0100
Subject: [PATCH] Added a memory watch guard.

Implemented a watch guard checking remaining free system memory every
second and restarting worker processes if required.
---
 auto/options                       |    5 ++-
 auto/sources                       |    2 +
 auto/unix                          |    2 +
 build.sh                           |    1 +
 src/os/unix/ngx_process_cycle.c    |   27 +++++++++++++++++-
 src/os/unix/ngx_process_memguard.c |   53 ++++++++++++++++++++++++++++++++++++
 src/os/unix/ngx_process_memguard.h |    7 +++++
 7 files changed, 94 insertions(+), 3 deletions(-)
 create mode 100644 src/os/unix/ngx_process_memguard.c
 create mode 100644 src/os/unix/ngx_process_memguard.h

diff --git a/auto/options b/auto/options
index d405901..d1683ec 100644
--- a/auto/options
+++ b/auto/options
@@ -185,8 +185,9 @@ do
         --with-size-t=*)                 NGX_WITH_SIZE_T="$value"       ;;
         --with-off-t=*)                  NGX_WITH_OFF_T="$value"        ;;
         --with-time-t=*)                 NGX_WITH_TIME_T="$value"       ;;
-	--with-endian=*)                 NGX_WITH_ENDIAN="$value"   	;;
-	--with-sys-nerr=*)               NGX_WITH_NGX_SYS_NERR="$value" ;;
+        --with-endian=*)                 NGX_WITH_ENDIAN="$value"       ;;
+        --with-sys-nerr=*)               NGX_WITH_NGX_SYS_NERR="$value" ;;
+        --with-min-free-mem=*)           NGX_PROCESS_FREEMEM_MIN="$value";;
 
         --builddir=*)                    NGX_OBJS="$value"          ;;
 
diff --git a/auto/sources b/auto/sources
index cc19f8d..777d5ee 100644
--- a/auto/sources
+++ b/auto/sources
@@ -154,6 +154,7 @@ UNIX_DEPS="$CORE_DEPS $EVENT_DEPS \
             src/os/unix/ngx_socket.h \
             src/os/unix/ngx_os.h \
             src/os/unix/ngx_user.h \
+            src/os/unix/ngx_process_memguard.h \
             src/os/unix/ngx_process_cycle.h"
 
 # add to UNIX_DEPS
@@ -185,6 +186,7 @@ UNIX_SRCS="$CORE_SRCS $EVENT_SRCS \
             src/os/unix/ngx_setproctitle.c \
             src/os/unix/ngx_posix_init.c \
             src/os/unix/ngx_user.c \
+            src/os/unix/ngx_process_memguard.c \
             src/os/unix/ngx_process_cycle.c"
 
 POSIX_DEPS=src/os/unix/ngx_posix_config.h
diff --git a/auto/unix b/auto/unix
index ed4a1e3..fa86d0e 100755
--- a/auto/unix
+++ b/auto/unix
@@ -792,3 +792,5 @@ ngx_feature_test='struct addrinfo *res;
                   if (getaddrinfo("localhost", NULL, NULL, &res) != 0) return 1;
                   freeaddrinfo(res)'
 . auto/feature
+
+have=NGX_PROCESS_FREEMEM_MIN value=$NGX_PROCESS_FREEMEM_MIN . auto/define
\ No newline at end of file
diff --git a/build.sh b/build.sh
index 91d3408..192f214 100755
--- a/build.sh
+++ b/build.sh
@@ -58,6 +58,7 @@ export CROSS_COMPILE=microblaze-unknown-linux-gnu-
 	--with-size-t=4 \
 	--with-off-t=4 \
 	--with-time-t=4 \
+	--with-min-free-mem=10240 \
 	--with-cc-opt="-mxl-multiply-high -mno-xl-soft-mul -mno-xl-soft-div -mxl-barrel-shift -mxl-pattern-compare -mcpu=v8.30.a --static --sysroot=/home/peschuster/project/microblaze-unknown-linux-gnu/microblaze-unknown-linux-gnu/sys-root -g" > configure.log
 
 # --sysroot=/home/peschuster/project/microblaze-unknown-linux-gnu/microblaze-unknown-linux-gnu/sys-root
diff --git a/src/os/unix/ngx_process_cycle.c b/src/os/unix/ngx_process_cycle.c
index c9b0266..3b6af74 100644
--- a/src/os/unix/ngx_process_cycle.c
+++ b/src/os/unix/ngx_process_cycle.c
@@ -4,12 +4,14 @@
  * Copyright (C) Nginx, Inc.
  */
 
-
 #include <ngx_config.h>
 #include <ngx_core.h>
 #include <ngx_event.h>
 #include <ngx_channel.h>
 
+#ifdef NGX_PROCESS_FREEMEM_MIN
+#include <ngx_process_memguard.h>
+#endif
 
 static void ngx_start_worker_processes(ngx_cycle_t *cycle, ngx_int_t n,
     ngx_int_t type);
@@ -89,6 +91,7 @@ ngx_master_process_cycle(ngx_cycle_t *cycle)
     ngx_uint_t         n, sigio;
     sigset_t           set;
     struct itimerval   itv;
+    struct itimerval   itmem;
     ngx_uint_t         live;
     ngx_msec_t         delay;
     ngx_listening_t   *ls;
@@ -164,6 +167,17 @@ ngx_master_process_cycle(ngx_cycle_t *cycle)
             }
         }
 
+        #ifdef NGX_PROCESS_FREEMEM_MIN
+        itmem.it_interval.tv_sec = 0;
+        itmem.it_interval.tv_usec = 0;
+        itmem.it_value.tv_sec = 1;
+        itmem.it_value.tv_usec = 0;
+
+        if (setitimer(ITIMER_REAL, &itmem, NULL) == -1) {
+            ngx_log_error(NGX_LOG_ALERT, cycle->log, ngx_errno, "setitimer() failed");
+        }
+		#endif
+
         ngx_log_debug0(NGX_LOG_DEBUG_EVENT, cycle->log, 0, "sigsuspend");
 
         sigsuspend(&set);
@@ -173,6 +187,17 @@ ngx_master_process_cycle(ngx_cycle_t *cycle)
         ngx_log_debug1(NGX_LOG_DEBUG_EVENT, cycle->log, 0,
                        "wake up, sigio %i", sigio);
 
+        #ifdef NGX_PROCESS_FREEMEM_MIN
+        if (ngx_sigalrm == 1) {
+            ngx_sigalrm = 0;
+			
+            ngx_log_debug0(NGX_LOG_DEBUG_EVENT, cycle->log, 0, "checking free mem");
+            if (ngx_master_process_memguard_triggered(NGX_PROCESS_FREEMEM_MIN) != 0) {
+			    ngx_reconfigure = 1;
+            }
+        }
+        #endif
+
         if (ngx_reap) {
             ngx_reap = 0;
             ngx_log_debug0(NGX_LOG_DEBUG_EVENT, cycle->log, 0, "reap children");
diff --git a/src/os/unix/ngx_process_memguard.c b/src/os/unix/ngx_process_memguard.c
new file mode 100644
index 0000000..581510c
--- /dev/null
+++ b/src/os/unix/ngx_process_memguard.c
@@ -0,0 +1,53 @@
+
+#include <stdio.h>
+#include <string.h>
+#include <ngx_process_memguard.h>
+
+const unsigned MAXLINE=9999;
+
+char* _ngx_process_memguard_trim_ws(char *line)
+{
+    return line + strspn(line, " \t");
+}
+
+char* _ngx_process_memguard_find_line(char *line)
+{
+	const char* match = "MemFree:";
+	const int match_len = 8;
+    char *p;
+
+    p = _ngx_process_memguard_trim_ws(line);
+	
+    return (strncmp(p, match,  match_len) == 0) ? (p + match_len) : NULL;
+}
+
+char ngx_master_process_memguard_triggered(long min_mem)
+{
+    char *p, *pend;
+    char line[MAXLINE];
+    long fmem = 0;
+    FILE *proc_meminfo = fopen("/proc/meminfo", "r");
+
+    if (!proc_meminfo) {
+        return 0;
+	}
+	
+	while ((p = fgets(line, MAXLINE, proc_meminfo))) {
+		if ((p = _ngx_process_memguard_find_line(line))) {
+			
+			 // check last char for newline terminator
+            pend = p + strlen(p) - 1;
+            if (*pend == '\n') *pend=0;
+            
+			p = _ngx_process_memguard_trim_ws(p);			
+			sscanf(p, "%ld", &fmem);
+	
+			fclose(proc_meminfo);
+			
+			return (fmem * 1024) < min_mem;
+        }
+    }
+	
+	fclose(proc_meminfo);	
+	return 0;	
+}
diff --git a/src/os/unix/ngx_process_memguard.h b/src/os/unix/ngx_process_memguard.h
new file mode 100644
index 0000000..0a3d035
--- /dev/null
+++ b/src/os/unix/ngx_process_memguard.h
@@ -0,0 +1,7 @@
+
+#ifndef _NGX_PROCESS_MEMGUARD_H_INCLUDED_
+#define _NGX_PROCESS_MEMGUARD_H_INCLUDED_
+
+char ngx_master_process_memguard_triggered(long min_mem);
+
+#endif /* _NGX_PROCESS_MEMGUARD_H_INCLUDED_ */
-- 
1.7.8.msysgit.0

